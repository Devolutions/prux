name: shared build & deploy workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ref:
        required: true
        type: string
      tag:
        required: true
        type: string

jobs:
  configs:
    runs-on: ubuntu-latest
    outputs:
      commit-sha: ${{ steps.variable.outputs.commit-sha }}

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set variable
        id: variable
        run: |
          sha=$(git rev-parse HEAD)
          echo $sha
          echo "commit-sha=$sha" >> $GITHUB_OUTPUT

      - name: Archive dockerfile
        uses: actions/upload-artifact@v4.3.6
        with:
          name: dockerfile
          path: Dockerfile.GH

  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/**
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build prux
        run: cargo build --bin prux --release

      - name: Archive prux
        uses: actions/upload-artifact@v4.3.6
        with:
          name: prux
          path: |
            target/release/prux

  release:
    if : ${{ github.event_name != 'workflow_dispatch' && inputs.environment == 'production' }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check for required assets
        id: check-assets
        run: |
          asset_count=$(gh release view ${{ inputs.tag }} --repo Devolutions/prux --json assets --jq '[.assets[] | select(.name == "dockerfile.tar.gz" or .name == "prux.tar.gz")] | length')

          if [ "$asset_count" -eq 2 ]; then
            echo "Assets are already present"
            echo "all_assets_exist=true" >> $GITHUB_OUTPUT
          else
            echo "all_assets_exist=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all workflow run artifacts
        if: ${{ steps.check-assets.outputs.all_assets_exist == 'false' }}
        uses: actions/download-artifact@v4

      - name: Compress artifacts
        if: ${{ steps.check-assets.outputs.all_assets_exist == 'false' }}
        run: |
          tar -czvf dockerfile.tar.gz dockerfile/
          tar -czvf prux.tar.gz prux/

      - name: Upload assets to release
        if: ${{ steps.check-assets.outputs.all_assets_exist == 'false' }}
        uses: Devolutions/actions/upload-release-asset@v1
        with:
          files: dockerfile.tar.gz;prux.tar.gz
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ inputs.tag }}

  build-image:
    needs: [build]
    secrets: inherit
    uses: ./.github/workflows/build-image.yml
    with:
      tag: ${{ inputs.tag }}

  deploy:
    environment: ${{ inputs.environment }}
    if: ${{ inputs.environment == 'staging' }}
    needs: [build-image]
    runs-on: ubuntu-latest

    steps:
      - name: Trigger lucid deployment on staging
        run: gh workflow run staging.yml --ref master --repo Devolutions/lucid -f deploy_only=true
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_WRITE_TOKEN }}

  report:
    concurrency: prux
    environment: report
    if: ${{ !cancelled() && !failure() }}
    needs: [configs, deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Check out Devolutions/actions
        uses: actions/checkout@v4
        with:
          repository: Devolutions/actions
          ref: v1
          token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
          path: ./.github/workflows

      - name: Install Devolutions Toolbox
        uses: ./.github/workflows/toolbox-install
        with:
          github_token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}

      - name: Save deployment
        run: dv github deployments set -r prux -e "${{ inputs.environment }}" -c "${{ needs.configs.outputs.commit-sha }}" -v "${{ inputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_WRITE_TOKEN }}

      - name: Deployed commit ${{ needs.configs.outputs.commit-sha }}
        run: echo "commit deployed -> ${{ needs.configs.outputs.commit-sha }}"
